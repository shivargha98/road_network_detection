# -*- coding: utf-8 -*-
"""Spacenet3-Model-UNET-Resnet-Aspp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hCy25DaUCVgg1gHflj8pSVpM7zqbnbqL
"""

!pip install keras==2.3.0
!pip install rasterio

import os
images_paths = ['/content/drive/My Drive/road_network/PS-RGB/','/content/drive/My Drive/AOI-shanghai-Roads/PS_RGB_8bit/']
label_paths = ['/content/drive/My Drive/road_network/masks_2m/','/content/drive/My Drive/AOI-shanghai-Roads/masks_2m/']

import matplotlib.pyplot as plt 
from skimage.util import view_as_windows
import cv2
images_list = []
masks_list = []
number = 1

for im_path,ma_path in zip(images_paths,label_paths):
  images_folder = list(os.walk(im_path))[0][2]
  masks_folder = list(os.walk(ma_path))[0][2]
  for i,j in zip(images_folder,masks_folder):
    print("\n -------Processing---",str(number),'of',str(1068),"------ \n")
    step_size = 300
    print('Using Step Size = ',step_size)
    full_image_path = im_path+i
    full_mask_path = ma_path+j
    print(i,'==>>',j)
    image = cv2.imread(full_image_path)
    print('Shape of the image:',image.shape)
    print('Dtype of Image :',image.dtype)
    mask = cv2.imread(full_mask_path,0)
    mask[mask>0] = 1
    mask = mask.reshape((1300,1300,1))
    print('Shape of the mask:',mask.shape)
    print('Dtype of Mask:',mask.dtype)
    image_patches = view_as_windows(image,(256,256,3),step=step_size)
    image_patches = image_patches.reshape((image_patches.shape[0],image_patches.shape[1],256,256,3))
    print('Patches_created for {} shape of patches {}:'.format(i,(image_patches.shape[-3],image_patches.shape[-2],image_patches.shape[-1])))
    print('Number of Patches of Image: ',image_patches.shape[0])
    mask_patches = view_as_windows(mask,(256,256,1),step=step_size)
    mask_patches = mask_patches.reshape((mask_patches.shape[0],mask_patches.shape[1],256,256,1))
    print('Patches Created for {} shape of patches {}:'.format(j,(mask_patches.shape[-3],mask_patches.shape[-2],mask_patches.shape[-1])))
    print('Number of Patches for Mask :',mask_patches.shape[0])
    for k in range(0,image_patches.shape[0]):
      for l in range(0,image_patches.shape[1]):
        images_list.append(image_patches[k][l])
    for m in range(0,mask_patches.shape[0]):
      for n in range(0,mask_patches.shape[1]):
        masks_list.append(mask_patches[m][n]) 
    print("Image Patches Appended to array for :{},{}".format(i,j))   
    number = number+1

import numpy as np
X_images = np.array(images_list)
Y_labels = np.array(masks_list)
print("Shape of Dataset Images :",X_images.shape)
print("Shape of label Images :",Y_labels.shape)

import h5py
with h5py.File('/content/drive/My Drive/Dataset_road_network/Dataset_images.h5', 'w') as hf:
    hf.create_dataset("X_images",  data=X_images)
with h5py.File('/content/drive/My Drive/Dataset_road_network/Dataset_labels.h5', 'w') as hf:
    hf.create_dataset("Y_labels",  data=Y_labels)

with h5py.File('/content/drive/My Drive/Dataset_road_network/Dataset_images.h5', 'r') as hf:
    X = hf['X_images'][:]
with h5py.File('/content/drive/My Drive/Dataset_road_network/Dataset_labels.h5', 'r') as hf:
    Y = hf['Y_labels'][:]

from tensorflow.keras.layers import Input,BatchNormalization,Activation,Dense,Dropout
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.layers import Input, BatchNormalization, Activation, Dense, Dropout,Add
from tensorflow.keras.layers import Conv2D, Conv2DTranspose
from tensorflow.keras.layers import MaxPooling2D, GlobalMaxPool2D,AveragePooling2D
from tensorflow.keras.layers import concatenate, add
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img
import keras
from keras import backend as K

def unet_resnet_aspp_model(input_tensor,n_filters,k_size,dropout=1):

  ##DownSampling
  input_shortcut = input_tensor

  ##1st Convlayer with Conv2D,BN,Activation
  conv1 = Conv2D(n_filters,(k_size,k_size),kernel_initializer='he_normal',padding='same')(input_tensor)
  conv1 = BatchNormalization()(conv1)
  conv1 = Activation("relu")(conv1)
  ##2nd Conv Layer with Conv2D,BN,Activation
  conv1 = Conv2D(n_filters,(k_size,k_size),kernel_initializer='he_normal',padding='same')(conv1)
  conv1 = BatchNormalization()(conv1)
  conv1 = Activation("relu")(conv1)
  ##3rd ConvLayer With Conv2D,BN only
  conv1 = Conv2D(n_filters,(k_size,k_size),kernel_initializer='he_normal',padding='same')(conv1)
  conv1 = BatchNormalization()(conv1)
  ##Residual Block
  resblock1 = Conv2D(n_filters,(1,1),kernel_initializer='he_normal',padding='same')(input_shortcut)
  resblock1 = BatchNormalization()(resblock1)
  conv1 = Add()([conv1,resblock1])
  conv1 = Activation("relu")(conv1)
  pool1 = MaxPooling2D((2,2))(conv1)
  pool1 = Dropout((dropout)/4)(pool1)
  
  input_shortcut = pool1
  ##1st ConvLayer
  conv2 = Conv2D(n_filters*2,(k_size,k_size),kernel_initializer="he_normal",padding="same")(pool1)
  conv2 = BatchNormalization()(conv2)
  conv2 = Activation("relu")(conv2)
  ##2nd ConvLayer
  conv2 = Conv2D(n_filters*2,(k_size,k_size),kernel_initializer="he_normal",padding="same")(conv2)
  conv2 = BatchNormalization()(conv2)
  conv2 = Activation("relu")(conv2)
  ###3rd ConvLayer
  conv2 = Conv2D(n_filters*2,(k_size,k_size),kernel_initializer="he_normal",padding="same")(conv2)
  conv2 = BatchNormalization()(conv2)
  ##Residual Block
  resblock2 = Conv2D(n_filters*2,(1,1),kernel_initializer="he_normal",padding="same")(input_shortcut)
  resblock2 = BatchNormalization()(resblock2)
  conv2 = Add()([conv2,resblock2])
  conv2 = Activation("relu")(conv2)
  pool2 = MaxPooling2D((2,2))(conv2)
  pool2 = Dropout((dropout)/3)(pool2)


  input_shortcut = pool2
  ##1st ConvLayer
  conv3 = Conv2D(n_filters*4,(k_size,k_size),kernel_initializer="he_normal",padding="same")(pool2)
  conv3 = BatchNormalization()(conv3)
  conv3 = Activation("relu")(conv3)
  ##2nd ConvLayer
  conv3 = Conv2D(n_filters*4,(k_size,k_size),kernel_initializer="he_normal",padding="same")(conv3)
  conv3 = BatchNormalization()(conv3)
  conv3 = Activation("relu")(conv3)
  ###3rd ConvLayer
  conv3 = Conv2D(n_filters*4,(k_size,k_size),kernel_initializer="he_normal",padding="same")(conv3)
  conv3 = BatchNormalization()(conv3)
  ##Residual Block
  resblock3 = Conv2D(n_filters*4,(1,1),kernel_initializer="he_normal",padding="same")(input_shortcut)
  resblock3 = BatchNormalization()(resblock3)
  conv3 = Add()([conv3,resblock3])
  conv3 = Activation("relu")(conv3)
  pool3 = MaxPooling2D((2,2))(conv3)
  pool3 = Dropout((dropout)/3)(pool3)

  input_shortcut = pool3
  ##1st ConvLayer
  conv4 = Conv2D(n_filters*8,(k_size,k_size),kernel_initializer="he_normal",padding="same")(pool3)
  conv4 = BatchNormalization()(conv4)
  conv4 = Activation("relu")(conv4)
  ##2nd ConvLayer
  conv4 = Conv2D(n_filters*8,(k_size,k_size),kernel_initializer="he_normal",padding="same")(conv4)
  conv4 = BatchNormalization()(conv4)
  conv4 = Activation("relu")(conv4)
  ###3rd ConvLayer
  conv4 = Conv2D(n_filters*8,(k_size,k_size),kernel_initializer="he_normal",padding="same")(conv4)
  conv4 = BatchNormalization()(conv4)
  ##Residual Block
  resblock4 = Conv2D(n_filters*8,(1,1),kernel_initializer="he_normal",padding="same")(input_shortcut)
  resblock4 = BatchNormalization()(resblock4)
  conv4 = Add()([conv4,resblock4])
  conv4 = Activation("relu")(conv4)
  pool4 = MaxPooling2D((2,2))(conv4)
  pool4 = Dropout((dropout)/3)(pool4)


  ##Middle Layer
  input_shortcut = pool4


  ##Atrous Spatial Pyramid Pooling Block
  atrous_spp1 = Conv2D(n_filters*2,(1,1),kernel_initializer="he_normal",padding="same")(pool4)
  atrous_spp2 = Conv2D(n_filters*4,(3,3),dilation_rate=6,kernel_initializer="he_normal",padding="same")(pool4)
  atrous_spp3 = Conv2D(n_filters*8,(3,3),dilation_rate=12,kernel_initializer="he_normal",padding="same")(pool4)
  atrous_spp4 = Conv2D(n_filters*16,(3,3),dilation_rate=18,kernel_initializer="he_normal",padding="same")(pool4)
  atrous_pool = AveragePooling2D((2,2))(pool4)
  atrous_pool = Conv2DTranspose(n_filters*16,(k_size,k_size),strides=(2,2),padding="same")(atrous_pool)

  ##Concating above atrous layers
  atrous_concat = concatenate([atrous_spp1,atrous_spp2,atrous_spp3,atrous_spp4])


  ##1st ConvLayer
  conv5 = Conv2D(n_filters*16,(k_size,k_size),kernel_initializer="he_normal",padding="same")(atrous_concat)
  conv5 = BatchNormalization()(conv5)
  conv5 = Activation("relu")(conv5)
  ##2nd ConvLayer
  conv5 = Conv2D(n_filters*16,(k_size,k_size),kernel_initializer="he_normal",padding="same")(conv5)
  conv5 = BatchNormalization()(conv5)
  conv5 = Activation("relu")(conv5)
  ###3rd ConvLayer
  conv5 = Conv2D(n_filters*16,(k_size,k_size),kernel_initializer="he_normal",padding="same")(conv5)
  conv5 = BatchNormalization()(conv5)
  ##Residual Block
  resblock5 = Conv2D(n_filters*16,(1,1),kernel_initializer="he_normal",padding="same")(input_shortcut)
  resblock5 = BatchNormalization()(resblock5)
  conv5 = Add()([conv5,resblock5])
  conv5 = Activation("relu")(conv5)



  ##UpSampling
  #Uplayer1
  deconv4 = Conv2DTranspose(n_filters*8,(k_size,k_size),strides=(2,2),padding="same")(conv5)
  uconv4 = concatenate([deconv4,conv4])
  input_shortcut = uconv4
  uconv4 = Dropout((dropout)/2)(uconv4)
  #1st Layer
  uconv4 = Conv2D(n_filters*8,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv4)
  uconv4 = BatchNormalization()(uconv4)
  uconv4 = Activation('relu')(uconv4)
  ##2nd Layer
  uconv4 = Conv2D(n_filters*8,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv4)
  uconv4 = BatchNormalization()(uconv4)
  uconv4 = Activation('relu')(uconv4)
  #3rd Layer
  uconv4 = Conv2D(n_filters*8,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv4)
  uconv4 = BatchNormalization()(uconv4)
  ##Resblock
  uresblock4 = Conv2D(n_filters*8,(1,1),kernel_initializer="he_normal",padding="same")(input_shortcut)
  uresblock4 = BatchNormalization()(uresblock4)
  uconv4 = Add()([uconv4,uresblock4])
  uconv4 = Activation("relu")(uconv4)
  
  ##UpLayer2
  deconv3 = Conv2DTranspose(n_filters*4,(k_size,k_size),strides=(2,2),padding="same")(uconv4)
  uconv3 = concatenate([deconv3,conv3])
  input_shortcut = uconv3
  uconv3 = Dropout((dropout)/2)(uconv3)
  #1st Layer
  uconv3 = Conv2D(n_filters*4,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv3)
  uconv3 = BatchNormalization()(uconv3)
  uconv3 = Activation('relu')(uconv3)
  ##2nd Layer
  uconv3 = Conv2D(n_filters*4,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv3)
  uconv3 = BatchNormalization()(uconv3)
  uconv3 = Activation('relu')(uconv3)
  #3rd Layer
  uconv3 = Conv2D(n_filters*4,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv3)
  uconv3 = BatchNormalization()(uconv3)
  ##Resblock
  uresblock3 = Conv2D(n_filters*4,(1,1),kernel_initializer="he_normal",padding="same")(input_shortcut)
  uresblock3 = BatchNormalization()(uresblock3)
  uconv3 = Add()([uconv3,uresblock3])
  uconv3 = Activation("relu")(uconv3)
  
  ##UpLayer3
  deconv2 = Conv2DTranspose(n_filters*2,(k_size,k_size),strides=(2,2),padding="same")(uconv3)
  uconv2 = concatenate([deconv2,conv2])
  input_shortcut = uconv2
  uconv2 = Dropout((dropout)/2)(uconv2)
  #1st Layer
  uconv2 = Conv2D(n_filters*2,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv2)
  uconv2 = BatchNormalization()(uconv2)
  uconv2 = Activation('relu')(uconv2)
  ##2nd Layer
  uconv2 = Conv2D(n_filters*2,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv2)
  uconv2 = BatchNormalization()(uconv2)
  uconv2 = Activation('relu')(uconv2)
  #3rd Layer
  uconv2 = Conv2D(n_filters*2,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv2)
  uconv2 = BatchNormalization()(uconv2)
  ##Resblock
  uresblock2 = Conv2D(n_filters*2,(1,1),kernel_initializer="he_normal",padding="same")(input_shortcut)
  uresblock2 = BatchNormalization()(uresblock2)
  uconv2 = Add()([uconv2,uresblock2])
  uconv2 = Activation("relu")(uconv2)

  ##UpLayer4
  deconv1 = Conv2DTranspose(n_filters*1,(k_size,k_size),strides=(2,2),padding="same")(uconv2)
  uconv1 = concatenate([conv1,deconv1])
  input_shortcut = uconv1
  uconv1 = Dropout((dropout)/2)(uconv1)
  #1st Layer
  uconv1 = Conv2D(n_filters*1,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv1)
  uconv1 = BatchNormalization()(uconv1)
  uconv1 = Activation('relu')(uconv1)
  ##2nd Layer
  uconv1 = Conv2D(n_filters*1,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv1)
  uconv1 = BatchNormalization()(uconv1)
  uconv1 = Activation('relu')(uconv1)
  #3rd Layer
  uconv1 = Conv2D(n_filters*1,(k_size,k_size),kernel_initializer="he_normal",padding="same")(uconv1)
  uconv1 = BatchNormalization()(uconv1)
  uresblock1 = Conv2D(n_filters*1,(1,1),kernel_initializer="he_normal",padding="same")(input_shortcut)
  uresblock1 = BatchNormalization()(uresblock1)
  uconv1 = Add()([uconv1,uresblock1])
  uconv1 = Activation("relu")(uconv1)

  output_layer = Conv2D(1, (1,1), padding="same", activation="sigmoid")(uconv1)
  model = Model(inputs=[input_tensor], outputs=[output_layer])
  return model

import keras,tensorflow
input_tensor = Input((256,256,3), name='img')
model = unet_resnet_aspp_model(input_tensor, n_filters=16,k_size=3,dropout=1)
model.compile(optimizer=tensorflow.keras.optimizers.Adam(learning_rate=0.001), loss= "binary_crossentropy", metrics=["accuracy"])

